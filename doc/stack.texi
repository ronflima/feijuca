\input texinfo @c -*-texinfo-*-
@c $Id: stack.texi,v 1.3 2005-02-19 22:13:47 ron_lima Exp $
@c %**start of header
@setfilename stack.info
@settitle    Stack routines
@c %**end of header

@copying
@c ** Copyrght
Copyright @copyright{} 2004 - Ronaldo Faria Lima - All rights reserved
@end copying

@titlepage
@c ** Title page

@title G.A. Library
@subtitle Stacks interfaces
@author Ronaldo Faria Lima

@c ** Copyright page
@page
@insertcopying
@end titlepage

@c ** Table of contents
@contents

@c ** The top node
@ifnottex
@node Top, algorithm, (dir), (dir)
@top Stack
@end ifnottex

@c ** Main Menu
@menu
* algorithm :: Algorithm implemented by G.A. Library
* data types:: Data types
* functions :: Description of all available functions
* Licenses  :: Licenses and other information
@end menu

@c ***** algorithm
@node algorithm, data types, Top, Top
@chapter Stacks in G.A. Library

The stacks algorithm is built uppon the lists algorithm. The stack is
a data structure where the first element to be added will be the last
element to be deleted.

G.A. Library implements the stacks in the classical manner: you have a
push operation to add data into the stack and a pop operation to
retrived data from the stack.

In order to make the stacks available to your program, all you gotta
do is to include the header file stack.h.

The stacks routines are, in fact, front-ends to the G.A. Library lists
routines.

@c ***** data types
@node data types, functions, algorithm, Top
@chapter Data types

The following data types are defined for stacks:

@itemize @bullet
@item stack_t
The stack descriptor. The descriptor that will have all needed data to
implement the algorithm.
@end itemize

@c ***** functions
@node functions, Licenses, data types, Top
@chapter Functions

@c ***** functions menu
@menu
* stack_init    :: Initializes a stack descriptor
* stack_destroy :: Destroys a stack descriptor
* stack_pop     :: Gets (pops) data from a stack
* stack_push    :: Adds (pushes) data to a stack
@end menu

@c ***** stack_init
@node stack_init, stack_destroy, functions, functions
@section int stack_init (stack_t *stack, deallocator_t *dealloc)

Purpose: Initializes a stack and make it ready to be used.

Parameters:
@itemize @bullet
@item stack
Stack descriptor to be initialized (mandatory)
@item dealloc
Deallocator function pointer. This is the function that will be called
to deallocate each item of the stack (mandatory)
@end itemize

@inforef{list_init, List initialization routine, list.info}, for more
information.

@c ***** stack_destroy
@node stack_destroy, stack_pop, stack_init, functions
@section int stack_destroy (stack_t *stack)

Purpose: Destroys the stack

Parameters:
@itemize @bullet
@item stack
Stack descriptor to destroy.
@end itemize

@inforef{list_destroy, List destruction routine, list.info}, for more
information.

@c ***** stack_pop
@node stack_pop, stack_push, stack_destroy, functions
@section int stack_pop (stack_t *stack, void **data)

Purpose: Gets an element from the stack

Parameters:
@itemize @bullet
@item stack
Stack descriptor
@item data
Data ``popped'' from the stack
@end itemize

@inforef{list_del, List deletion routine, list.info}, for more
information.
@inforef{list_move, List navigation routine, list.info}, for more
information.

@c ***** stack_push
@node stack_push,  , stack_pop, functions
@section int stack_push (stack_t *stack, const void *data)

Purpose: Pushes a new item into the stack

Parameters:
@itemize @bullet
@item stack
Stack decriptor
@item data
Data to add into the stack
@end itemize

@inforef{list_insert, List insertion routine, list.info}, for more
information.

@c ** Includes the licenses 
@node Licenses, , functions, Top
@include licenses.texi

@bye
