\input texinfo @c -*-texinfo-*-

@c %**start of header
@setfilename fjc_ivector.info
@settitle    Infinite Vectors
@c %**end of header

@copying
@c ** Copyrght
Copyright @copyright{} 2004 - Ronaldo Faria Lima - All rights reserved
@end copying

@titlepage
@c ** Title page

@title Feijuca Library
@subtitle Infinite Vectors Interface
@author Ronaldo Faria Lima

@c ** Copyright page
@page
@insertcopying
@end titlepage

@c ** Table of contents
@contents

@c ** The top node
@ifnottex
@node Top
@top Infinite Vectors
@end ifnottex

@c ** Main Menu
@menu
* algorithm :: Algorithm implemented by Feijuca Library
* data types:: Data types
* functions :: Description of all available functions
* Licenses  :: Licenses and other information
@end menu

@node algorithm, data types, Top, Top
@chapter Infinite vectors in G. A. Library

The infinite vetor is a vector that let you redimension it. You can
keep adding data to it without having to worry about the limits of
it. The Feijuca Library implementation of infinite vectors always
allocates it as a contiguous memory arena.

That is the main limitation of the algorithm: it needs always
contiguous memory to keep allocating memory. 

Use this algorithm when you have a small amount of data to load. You
can use the ``fjc_ivector.h'' header file.

@node data types, functions, algorithm, Top
@chapter Data types

The following data types are defined for the infinite vectors:

@itemize @bullet
@item fjc_ivector_t
The vector descriptor. This is the base data type of all operations
involving this algorithm.
@end itemize

@node functions, Licenses, data types, Top
@chapter Functions
@menu
* fjc_ivector_init    :: Vector allocation routine
* fjc_ivector_destroy :: Frees an entire vector from memory
* fjc_ivector_get     :: Gets a single element from a vector
* fjc_ivector_put     :: Overwrites a single location in the vector
* fjc_ivector_add     :: Adds a new entry in the vector
* fjc_ivector_qsort   :: Sorts the vector
* fjc_ivector_bsearch :: Searches the vector using a criterion
* fjc_ivector_del     :: Deletes a single entry in the vector 
@end menu

@c ***** fjc_ivector_init
@node fjc_ivector_init, fjc_ivector_destroy, functions, functions
@section fjc_error_t fjc_ivector_init(fjc_ivector_t *ivector, fjc_compare_t * compare, fjc_deallocator_t * dealloc, size_t size)

Purpose: Initializes a new vector descriptor.

Parameters:
@itemize @bullet
@item ivector
Vector to initialize (mandatory)
@item compare
Compare function to compare individual items of the vector (not
required).
@item dealloc
Deallocator to deallocate each item of the vector (not required).
@item datalen
Size of each element of the vector
@end itemize

Return values:
@itemize @bullet
@item E_FJC_OK
The operation suceeded
@item E_FJC_INVAL
The data length provided has an invalid value. It must be always
greater than zero.
@end itemize

@emph{Hints}:
@itemize @bullet
@item 
The deallocator is used only when the vector contains a set of
pointers. In normal operations, it is not needed and can be provided
as a NULL pointer.
@item
The compare function is not mandatory. If you intend to use
@samp{fjc_ivector_bsearch} or @samp{fjc_ivector_qsort} functions, then you
will have to provide such function (@xref{fjc_ivector_bsearch},
@xref{fjc_ivector_qsort}.).
@end itemize

@c ***** fjc_ivector_destroy
@node fjc_ivector_destroy, fjc_ivector_get, fjc_ivector_init, functions
@section fjc_error_t fjc_ivector_destroy (fjc_ivector_t *ivector)

Purpose: Deallocates the whole vector from memory.

Parameters:
@itemize @bullet
@item ivector
Descriptor of the ivector to be freed.
@end itemize

Return values:
@itemize @bullet
@item E_FJC_OK
when the operation succeeds
@item E_FJC_INVAL
when you try to operate over an invalid ivector descriptor.
@end itemize

@c ***** fjc_ivector_get
@node fjc_ivector_get, fjc_ivector_put, fjc_ivector_destroy, functions
@section fjc_error_t (fjc_ivector_get) (fjc_ivector_t *ivector, void **data, size_t idx)

Purpose: Retrieves an item from the vector

Parameters:
@itemize @bullet
@item ivector
Vector descriptor
@item data
Data arena to store the data retrieved from the vector.
@item idx
Index number. Identifies the position from where the element will be
retrieved from.
@end itemize

Return values:
@itemize @bullet
@item E_FJC_OK
The operation succeeded
@item E_FJC_INVAL
The value of the @samp{idx} parameter is not valid. It may be greater
than the size of the vector or less than zero. Also, this function may
return this value when the ivector descriptor is not valid.
@end itemize

@emph{Hints}:
@itemize @bullet
@item
The retrieved data is actually a pointer to the right location within
the vector. So, if you change the contents of the retrived data you
will be changing, actually, the data inside the vector.
@end itemize

@c ***** fjc_ivector_put
@node fjc_ivector_put, fjc_ivector_add, fjc_ivector_get, functions
@section fjc_error_t fjc_ivector_put (fjc_ivector_t *ivector, size_t idx, const void *data)

Purpose: Overwrite a given element of the vector

Parameters:
@itemize @bullet
@item ivector
Vector descriptor
@item idx
Index of the vector. Used to address the position where you want to
overwrite data.
@item data
Memory arena that contains the data that will be used to overwrite the
vector position.
@end itemize

Return values:
@itemize @bullet
@item E_FJC_OK
Operation suceeded
@item E_FJC_INVAL
The idx parameter is not valid or the data arena provided is a NULL
pointer. This value can be returned, also, when the ivector descriptor
is not valid.
@end itemize

@c ***** fjc_ivector_add
@node fjc_ivector_add, fjc_ivector_qsort, fjc_ivector_put, functions
@section fjc_error_t fjc_ivector_add (fjc_ivector_t *ivector, const void *data)

Purpose: Adds a new element to the vector by enlarging the vector

Parameters:
@itemize @bullet
@item ivector
Vector descriptor
@item data
Data to add into the vector
@end itemize

Return values:
@itemize @bullet
@item E_FJC_OK
Operation succeeded
@item E_FJC_NOMEM
No memory available to enlarge the vector
@item E_FJC_INVAL
When the operation is tried on an invalid ivector descriptor.
@end itemize

@c ***** fjc_ivector_qsort
@node fjc_ivector_qsort, fjc_ivector_bsearch, fjc_ivector_add, functions
@section int fjc_ivector_qsort (fjc_ivector_t *ivector)

Purpose: Sorts the vector using the quick sort algorithm

Parameters:
@itemize @bullet
@item ivector
Vector to sort
@end itemize

Return values:
@itemize @bullet
@item E_FJC_OK
Operation suceeded
@item E_FJC_INVAL
There is no comparison function available for the sorting function or
the ivector descriptor is not valid.
@end itemize

@c ***** fjc_ivector_bsearch
@node fjc_ivector_bsearch, fjc_ivector_del, fjc_ivector_qsort, functions
@section fjc_error_t fjc_ivector_bsearch (fjc_ivector_t *ivector, void **data, const void *key)

Purpose: Searches the vector for a given key

Parameters:
@itemize @bullet
@item ivector
Vector descriptor
@item data
Found data
@item key
Key to search for
@end itemize

Return values:
@itemize @bullet
@item E_FJC_OK
Operation succeeded. The item was found.
@item E_FJC_EOF
No item was found.
@item E_FJC_INVAL
The @samp{data} parameter is invalid or the comparison function was
not provided during the vector initialization. When the ivector
descriptor is invalid the function may return this value also.
@end itemize

@c ***** fjc_ivector_del
@node fjc_ivector_del, , fjc_ivector_bsearch, functions
@section fjc_error_t fjc_ivector_del (fjc_ivector_t *ivector, size_t idx)

Purpose: Deletes a single entry in the vector

Parameters:
@itemize @bullet
@item ivector
Vector to delete the item from
@item idx
Index to the item to be deleted
@end itemize

Return values:
@itemize @bullet
@item E_FJC_OK
Operation succeeded
@item E_FJC_INVAL
The @samp{idx} parameter is greater than the size of the vector. When
the ivector descritptor is invalid the function may return this value
also.
@end itemize

@c ** Includes the licenses 
@node Licenses, , functions, Top
@include licenses.texi

@bye
