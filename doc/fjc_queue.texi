\input texinfo @c -*-texinfo-*-

@c %**start of header
@setfilename fjc_queue.info
@settitle    Queue routines
@c %**end of header

@copying
@c ** Copyrght
Copyright @copyright{} 2004 - Ronaldo Faria Lima - All rights reserved
@end copying

@titlepage
@c ** Title page

@title Feijuca Library
@subtitle Queue interfaces
@author Ronaldo Faria Lima

@c ** Copyright page
@page
@insertcopying
@end titlepage

@c ** Table of contents
@contents

@c ** The top node
@ifnottex
@node Top, algorithm, (dir), (dir)
@top Queue
@end ifnottex

@c ** Main Menu
@menu
* algorithm :: Algorithm implemented by Feijuca Library
* data types:: Data types
* functions :: Description of all available functions
* Licenses  :: Licenses and other information
@end menu

@c ***** algorithm
@node algorithm, data types, Top, Top
@chapter Queue implementation in Feijuca Library

The queue algorithm is a data structure where the first item to get in
will be the first item to get out. Feijuca Library uses the single lists
algorithm as the queue implementation basis.

Like stacks, queue functions are front-ends for lists operations.

To add queue algorithms to your program, simply include the
``fjc_queue.h'' header file. All needed declarations are there.

@c ***** data types
@node data types, functions, algorithm, Top
@chapter Data types

In order to implement the queues, the following data types are
defined:

@itemize @bullet
@item fjc_queue_t
Queue descriptor. Describes the entire queue.
@end itemize

@c ***** functions
@node functions, Licenses , data types, Top
@chapter Functions

@c ***** functions menu
@menu
* fjc_queue_init    :: Initializes a queue descriptor
* fjc_queue_destroy :: Destroys the queue descriptor
* fjc_queue_pop     :: Gets (pops) an item from the queue
* fjc_queue_push    :: Adds (pushes) an item into the queue
@end menu

@c ***** fjc_queue_init
@node fjc_queue_init, fjc_queue_destroy, functions, functions
@section fjc_error_t fjc_queue_init (fjc_queue_t *queue, deallocator_t *dealloc)

Purpose: Initializes a queue descriptor and makes it available for
usage.

Parameters:
@itemize @bullet
@item queue
Queue descriptor to initialize
@item dealloc
Deallocator to use to clean up memory when each element of the queue
is popped.
@end itemize

@emph{Hints}:
@itemize @bullet
@item
The deallocator is used effectively only by the fjc_queue_destroy
routine. Even though, you have to provide it in order to avoid memory
leaks when deleting the queue from memory.
@end itemize

@inforef{fjc_list_init, List initialization routine, fjc_list.info}, for more
information.

@c ***** fjc_queue_destroy
@node fjc_queue_destroy, fjc_queue_pop, fjc_queue_init, functions
@section fjc_error_t fjc_queue_destroy (fjc_queue_t *queue)

Purpose: Deletes the entire queue from the memory

Parameters:
@itemize @bullet
@item queue
Queue descriptor to destroy
@end itemize

@inforef{fjc_list_destroy, List destruction routine, fjc_list.info}, for more
information.

@c ***** fjc_queue_pop
@node fjc_queue_pop, fjc_queue_push, fjc_queue_destroy, functions
@section fjc_error_t fjc_queue_pop (fjc_queue_t *queue, void **data)

Purpose: Gets (pops) an element from the queue

Parameters:
@itemize @bullet
@item queue
Queue descriptor
@item data
Data popped from the queue
@end itemize

@inforef{fjc_list_del, List deletion routine, fjc_list.info}, for more
information.

@c ***** fjc_queue_push
@node fjc_queue_push,  , fjc_queue_pop, functions
@section fjc_error_t fjc_queue_push (fjc_queue_t *queue, const void *data)

Purpose: Adds (pushes) a new element to the queue

Parameters:
@itemize @bullet
@item queue
Queue descriptor
@item data
Data to push into the queue
@end itemize

@inforef{fjc_list_insert, List insertion routine, fjc_list.info}, for more
information.

@c ** Includes the licenses 
@node Licenses, ,functions, Top
@include licenses.texi

@bye
