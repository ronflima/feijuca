\input texinfo @c -*-texinfo-*-

@c %**start of header
@setfilename fjc_stack.info
@settitle    Stack routines
@c %**end of header

@copying
@c ** Copyrght
Copyright @copyright{} 2004 - Ronaldo Faria Lima - All rights reserved
@end copying

@titlepage
@c ** Title page

@title Feijuca Library
@subtitle Stacks interfaces
@author Ronaldo Faria Lima

@c ** Copyright page
@page
@insertcopying
@end titlepage

@c ** Table of contents
@contents

@c ** The top node
@ifnottex
@node Top, algorithm, (dir), (dir)
@top Stack
@end ifnottex

@c ** Main Menu
@menu
* algorithm  :: Algorithm implemented by Feijuca Library
* data types :: Data types
* functions  :: Description of all available functions
* Licenses   :: Licenses and other information
@end menu

@c ***** algorithm
@node algorithm, data types, Top, Top
@chapter Stacks in Feijuca Library

The stack algorithm is built upon the list algorithm. The stack is a
data structure where the first element to be added will be the last
element to be deleted.

Feijuca Library implements the stacks in the classical manner: you
have a push operation to add data into the stack and a pop operation
to retrive data from the stack.

In order to make the stacks available to your program, all you gotta
do is to include the header file fjc_stack.h.

The stacks routines are, in fact, front-ends to the Feijuca Library
lists routines.

@c ***** data types
@node data types, functions, algorithm, Top
@chapter Data types

The following data types are defined for stacks:

@itemize @bullet
@item fjc_stack_t
The stack descriptor. The descriptor that will have all needed data to
implement the algorithm.
@end itemize

@c ***** functions
@node functions, Licenses, data types, Top
@chapter Functions

@c ***** functions menu
@menu
* fjc_stack_init    :: Initializes a stack descriptor
* fjc_stack_destroy :: Destroys a stack descriptor
* fjc_stack_pop     :: Gets (pops) data from a stack
* fjc_stack_push    :: Adds (pushes) data to a stack
@end menu

@c ***** fjc_stack_init
@node fjc_stack_init, fjc_stack_destroy, functions, functions
@section fjc_error_t fjc_stack_init (fjc_stack_t *stack, fjc_deallocator_t *dealloc)

Purpose: Initializes a stack and make it ready to be used.

Parameters:
@itemize @bullet
@item stack
Stack descriptor to be initialized (mandatory)
@item dealloc
Deallocator function pointer. This is the function that will be called
to deallocate each item of the stack (mandatory)
@end itemize

@inforef{fjc_list_init, List initialization routine, fjc_list.info}, for more
information.

@c ***** fjc_stack_destroy
@node fjc_stack_destroy, fjc_stack_pop, fjc_stack_init, functions
@section fjc_error_t fjc_stack_destroy (fjc_stack_t *stack)

Purpose: Destroys the stack

Parameters:
@itemize @bullet
@item stack
Stack descriptor to destroy.
@end itemize

@inforef{fjc_list_destroy, List destruction routine, fjc_list.info}, for more
information.

@c ***** fjc_stack_pop
@node fjc_stack_pop, fjc_stack_push, fjc_stack_destroy, functions
@section fjc_error_t fjc_stack_pop (fjc_stack_t *stack, void **data)

Purpose: Gets an element from the stack

Parameters:
@itemize @bullet
@item stack
Stack descriptor
@item data
Data ``popped'' from the stack
@end itemize

@inforef{fjc_list_del, List deletion routine, fjc_list.info}, for more
information.
@inforef{fjc_list_move, List navigation routine, fjc_list.info}, for more
information.

@c ***** fjc_stack_push
@node fjc_stack_push,  , fjc_stack_pop, functions
@section fjc_error_t fjc_stack_push (fjc_stack_t *stack, const void *data)

Purpose: Pushes a new item into the stack

Parameters:
@itemize @bullet
@item stack
Stack decriptor
@item data
Data to add into the stack
@end itemize

@inforef{fjc_list_insert, List insertion routine, fjc_list.info}, for more
information.

@c ** Includes the licenses 
@node Licenses, , functions, Top
@include licenses.texi

@bye
