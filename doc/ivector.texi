\input texinfo @c -*-texinfo-*-
@c $Id: ivector.texi,v 1.4 2005-02-19 22:13:47 ron_lima Exp $
@c %**start of header
@setfilename ivector.info
@settitle    Infinite Vectors
@c %**end of header

@copying
@c ** Copyrght
Copyright @copyright{} 2004 - Ronaldo Faria Lima - All rights reserved
@end copying

@titlepage
@c ** Title page

@title G.A. Library
@subtitle Infinite Vectors Interface
@author Ronaldo Faria Lima

@c ** Copyright page
@page
@insertcopying
@end titlepage

@c ** Table of contents
@contents

@c ** The top node
@ifnottex
@node Top
@top Template
@end ifnottex

@c ** Main Menu
@menu
* algorithm :: Algorithm implemented by G.A. Library
* data types:: Data types
* functions :: Description of all available functions
* Licenses  :: Licenses and other information
@end menu

@node algorithm, data types, Top, Top
@chapter Infinite vectors in G. A. Library

The infinite vetor is a vector that let you redimension it. You can
keep adding data to it without having to worry about the limits of
it. The G.A. Library implementation of infinite vectors always
allocates it as a contiguous memory arena.

That is the main limitation of the algorithm: it needs always
contiguous memory to keep allocating memory. 

Use this algorithm when you have a small amount of data to load.

@node data types, functions, algorithm, Top
@chapter Data types

The following data types are defined for the infinite vectors:

@itemize @bullet
@item ivector_t
The vector descriptor. This is the base data type of all operations
involving this algorithm.
@end itemize

@node functions, Licenses, data types, Top
@chapter Functions
@menu
* ivector_init   :: Vector allocation routine
* ivector_destroy    :: Frees an entire vector from memory
* ivector_get     :: Gets a single element from a vector
* ivector_put     :: Overwrites a single location in the vector
* ivector_add     :: Adds a new entry in the vector
* ivector_qsort   :: Sorts the vector
* ivector_bsearch :: Searches the vector using a criterion
* ivector_del     :: Deletes a single entry in the vector 
@end menu

@c ***** ivector_init
@node ivector_init, ivector_destroy, functions, functions
@section int ivector_init(ivector_t *ivector, compare_t * compare, deallocator_t * dealloc, size_t size)

Purpose: Initializes a new vector descriptor.

Parameters:
@itemize @bullet
@item ivector
Vector to create (mandatory)
@item compare
Compare function to compare individual items of the vector (not
required).
@item dealloc
Deallocator to deallocate each item of the vector (not required).
@item datalen
Size of each element of the vector
@end itemize

Return values:
@itemize @bullet
@item 0
The operation suceeded
@item EGAINVAL
The data length provided has an invalid value. It must be always
greater than zero.
@item EGANOMEM
The operation could not allocate memory for the descriptor.
@end itemize

@emph{Hints}:
@itemize @bullet
@item 
The deallocator is used only when the vector contains a set of
pointers. In normal operations, it is not needed and can be provided
as a NULL pointer.
@item
The compare function is not mandatory. If you intend to use
@samp{ivector_bsearch} or @samp{ivector_qsort} functions, then you
will have to provide such function (@xref{ivector_bsearch},
@xref{ivector_qsort}.).
@end itemize

@c ***** ivector_destroy
@node ivector_destroy, ivector_get, ivector_init, functions
@section int ivector_destroy (ivector_t *ivector)

Purpose: Deallocates the whole vector from memory.

Parameters:
@itemize @bullet
@item ivector
Descriptor of the ivector to be initialized
@end itemize

Return values:
@itemize @bullet
@item This function always returns zero.
@end itemize

@c ***** ivector_get
@node ivector_get, ivector_put, ivector_destroy, functions
@section int (ivector_get) (ivector_t *ivector, void **data, size_t idx)

Purpose: Retrieves an item from the vector

Parameters:
@itemize @bullet
@item ivector
Vector descriptor
@item data
Data arena to store the data retrieved from the vector.
@item idx
Index number. Identifies the position from where the element will be
retrieved from.
@end itemize

Return values:
@itemize @bullet
@item 0
The operation succeeded
@item EGAINVAL
The value of the @samp{idx} parameter is not valid. It may be greater
than the size of the vector or less than zero.
@end itemize

@emph{Hints}:
@itemize @bullet
@item
The retrieved data is actually a pointer to the right location within
the vector. So, if you change the contents of the retrived data you
will be changing, actually, the data inside the vector.
@end itemize

@c ***** ivector_put
@node ivector_put, ivector_add, ivector_get, functions
@section int ivector_put (ivector_t *ivector, size_t idx, const void *data)

Purpose: Overwrite a given element of the vector

Parameters:
@itemize @bullet
@item ivector
Vector descriptor
@item idx
Index of the vector. Used to address the position where you want to
overwrite data.
@item data
Memory arena that contains the data that will be used to overwrite the
vector position.
@end itemize

Return values:
@itemize @bullet
@item 0
Operation suceeded
@item EGAINVAL
The idx parameter is not valid or the data arena provided is a NULL
pointer.
@end itemize

@c ***** ivector_add
@node ivector_add, ivector_qsort, ivector_put, functions
@section int ivector_add (ivector_t *ivector, const void *data)

Purpose: Adds a new element to the vector by enlarging the vector

Parameters:
@itemize @bullet
@item ivector
Vector descriptor
@item data
Data to add into the vector
@end itemize

Return values:
@itemize @bullet
@item 0
Operation succeeded
@item EGANOMEM
No memory available to enlarge the vector
@end itemize

@c ***** ivector_qsort
@node ivector_qsort, ivector_bsearch, ivector_add, functions
@section int ivector_qsort (ivector_t *ivector)

Purpose: Sorts the vector using the quick sort algorithm

Parameters:
@itemize @bullet
@item ivector
Vector to sort
@end itemize

Return values:
@itemize @bullet
@item 0
Operation suceeded
@item EGAINVAL
There is no comparison function available for the sorting function.
@end itemize

@c ***** ivector_bsearch
@node ivector_bsearch, ivector_del, ivector_qsort, functions
@section int ivector_bsearch (ivector_t *ivector, void **data, const void *key)

Purpose: Searches the vector for a given key

Parameters:
@itemize @bullet
@item ivector
Vector descriptor
@item data
Found data
@item key
Key to search for
@end itemize

Return values:
@itemize @bullet
@item 0
Operation succeeded. The item was found.
@item EOF
No item was found.
@item EGAINVAL
The @samp{data} parameter is invalid or the comparison function was
not provided during the vector initialization.
@end itemize

@c ***** ivector_del
@node ivector_del, , ivector_bsearch, functions
@section int ivector_del (ivector_t *ivector, size_t idx)

Purpose: Deletes a single entry in the vector

Parameters:
@itemize @bullet
@item ivector
Vector to delete the item from
@item idx
Index to the item to be deleted
@end itemize

Return values:
@itemize @bullet
@item 0
Operation succeeded
@item EGAINVAL
The @samp{idx} parameter is greater than the size of the vector.
@end itemize

@c ** Includes the licenses 
@node Licenses, , functions, Top
@include licenses.texi

@bye
