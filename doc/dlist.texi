\input texinfo @c -*-texinfo-*-
@c $Id: dlist.texi,v 1.6 2005-07-11 08:37:32 ron_lima Exp $
@c %**start of header
@setfilename dlist.info
@settitle    Double linked lists
@c %**end of header

@copying
@c ** Copyrght
Copyright @copyright{} 2004 - Ronaldo Faria Lima - All rights reserved
@end copying

@titlepage
@c ** Title page

@title G.A. Library
@subtitle Double linked lists interface
@author Ronaldo Faria Lima

@c ** Copyright page
@page
@insertcopying
@end titlepage

@c ** Table of contents
@contents

@c ** The top node
@ifnottex
@node Top
@top DList
@end ifnottex

@c ** Main Menu
@menu
* algorithm :: Algorithm implemented by G.A. Library
* data types:: Data types
* functions :: Description of all available functions
* Licenses  :: Licenses and other information
@end menu

@c ***** algorithm
@node algorithm, data types, Top, Top
@chapter Double linked lists in G.A. Library
G.A. Library implements double linked lists through the header file
<dlist.h>. The list descriptor contains always the first and the last
elements for fast access in the list. Navigation in the list is
possible in both ways.

Double linked lists are useful when you have a collection of data that
must be traversed in two directions in memory and you don't know the
amount of data that it will hold.

The implementation for double linked lists was done from scratch,
instead of using some of the single-linked lists routines or data
types. It would be possible to reuse the list_t descriptor by adding
into it a new field. However, this unused field would spend useless
memory if you want to use the single-linked lists stuff.

Until this release, no thread safety was analyzed or even implemented
in the algorithms. So, thread safety is not guaranteed.

@c ***** Data types
@node data types, functions, algorithm, Top
@chapter Data types
The following data types are defined for list implementation.
@itemize @bullet
@item void (* deallocator_t)(void *data):
Pointer to a user function that will be called in order to deallocate
memory for each data element of the list. This datatype is being
reused from list.h.
@item dlist_element_t:
Data structure that describes a list element. There is no need to use
this data type since this is used internally by the list descriptor.
@item dlist_t:
Data structure that decribes the list descriptor. This is used to hold
all needed data to implement the list. There is no need to access
directly any element of this structure since they are manipulated by
the functions of the library.
@end itemize

@c ***** functions
@node functions, Licenses, data types, Top
@chapter Functions
@menu
* dlist_init    :: List initialization function
* dlist_destroy :: List destruction function
* dlist_get     :: Element getter
* dlist_insert  :: Inserts a new element
* dlist_move    :: Iterates the list
* dlist_del     :: Deletes a single element of the list
@end menu

@c ***** dlist_init
@node dlist_init, dlist_destroy, functions, functions
@section int dlist_init (list_t *list, deallocator_t dealloc)
Purpose: Initializes the list descriptor

Parameters:
@itemize @bullet
@item list:
List descriptor to initialize.
@item dealloc:
Deallocator pointer function for the user-defined deallocation
function (required)
@end itemize

Return values:
@itemize @bullet
@item 0
Operation succeeded
@item EGAINVAL
The deallocator provided is not valid. The validation of the
deallocator, however, is done against its nullity.
@end itemize

@emph{Hints}:
@itemize
@item
The deallocator function is a user-defined function that will handle
the deallocation of the data stored in the list. Since this set of
functions were designed to work over any kind of user-defined data, so
the deallocation will be responsibility of the user, since the library
has no way to know how to handle deallocations of generic data. This
function must have the following prototype:
@example
void deallocator (void *data);
@end example
You will note that this prototype is exactly the same definition of
the @samp{deallocator_t} data type.
@end itemize

@c ***** dlist_destroy
@node dlist_destroy, dlist_get, dlist_init, functions
@section int dlist_destroy (list_t *list)
Purpose: Deallocates each element and releases the entire list from
memory

Parameters:
@itemize @bullet
@item list:
The list descriptor
@end itemize

Return values:
@itemize @bullet
@item 0
when the operation succeeds
@item EGAINVAL
The destruction operation was tried on an invalid descriptor.
@end itemize

@c ***** dlist_get
@node dlist_get, dlist_insert, dlist_destroy, functions
@section int dlist_get (list_t * list, void **data, int whence)
Purpose: Gets an element data from the list and make it possible to
navigate the list after getting the data. 

Parameters:
@itemize @bullet
@item list:
The list descriptor
@item data:
Data to be get. Remain untouched if the function could not retrieve
data for some reason.
@item whence:
This parameter indicates how to navigate the list after the data is
retrieved.
@itemize @bullet
@item POS_CURR: 
Gets the current element data and do not update the current pointer.
@item POS_NEXT:
Gets the current element data and makes the current pointer point to the
next element (moves the list)
@item POS_PREV:
Gets the current element data and makes the current pointer point to
the previous element (moves the list).
@end itemize
@end itemize

Return values:
@itemize @bullet
@item 0
Operation succeeded
@item EOF
The end of the list was reached
@item EGAINVAL
Invalid argument provided to @emph{whence} parameter or the list
descriptor is invalid.
@end itemize

@emph{Hints}: 
@itemize
@item
To get the first element, use dlist_move function (@xref{dlist_move}.)
with whence=POS_HEAD and then use this function with whence=POS_CURR.
@item
This function was designed, basically, to retrieve data from the list
by iterating it from the current position. The data is
retrieved and not deleted from the list.
@item 
This function will return, always, the data from the current position
of the list. The @samp{whence} parameter says how the list will be
navigated after the current element is returned.
@end itemize

@c ***** dlist_insert
@node dlist_insert, dlist_move, dlist_get, functions
@section int dlist_insert (list_t * list, const void *data, int whence)
Purpose: Inserts a new element in the list

Parameters:
@itemize @bullet
@item list:
List descriptor
@item data:
Data pointer to be inserted in the list
@item whence:
Where to insert the new element:
@itemize @bullet
@item POS_NEXT: 
As the next element based on the current position.
@item POS_PREV:
As the previous element, based on the current position.
@item POS_HEAD:
As the list head.
@item POS_TAIL:
As the list tail.
@end itemize
@end itemize

Return values:
@itemize @bullet
@item 0
Operation succeeded
@item EGANOMEM
No memory available to create the new list element
@item EGABADC
Wrong insertion. The operation demanded a valid current position but
there was none available.
@item EGAINVAL
Invalid @samp{whence} parameter provided or the list descriptor is
invalid.
@end itemize

@emph{Hints}:
@itemize
@item 
This function does not update the current pointer. If you want to
update the current pointer after an insertion, you will need to call
dlist_move to do so (@xref{dlist_move}.).
@end itemize

@c ***** dlist_move
@node dlist_move, dlist_del, dlist_insert, functions
@section int dlist_move (list_t * list, int whence)
Purpose: Moves the current pointer to a specific location within the
list

Parameters:
@itemize @bullet
@item list
The list descriptor
@item whence
How to move the pointer:
@itemize @bullet
@item POS_HEAD
Moves the pointer to the beginning of the list
@item POS_TAIL
Moves the pointer to the end of the list
@item POS_NEXT
Moves the pointer to the next item of the list
@item POS_NONE
No effect in the navigation point. The current pointer is not updated.
@end itemize
@end itemize

Return values:
@itemize @bullet
@item 0
Operation succeeded
@item EGAINVAL
Wrong value provided to the @samp{whence} parameter or the list
descriptor is invalid.
@item EOF
End of list reached
@end itemize

@emph{Hints}:
@itemize
@item
If the list was never moved, the current pointer points to
nowhere. Any try to move the pointer to anywhere that is not the
beginning or the end of the list will return EOF.
@end itemize

@c ***** dlist_del
@node dlist_del, , dlist_move, functions
@section int dlist_del (list_t * list, void **data, int whence)
Purpose: Deletes a single element from the list

Parameters:
@itemize @bullet
@item list
The list descriptor
@item data
Data storage arena to store the data extracted from the list
@item whence
Where to delete the item:
@itemize @bullet
@item POS_HEAD
Deletes the head of the list
@item POS_CURR
Deletes the current item
@item POS_NEXT
Deletes the next item based on the current pointer
@item POS_PREV
Deletes the previous item based on the current pointer
@item POS_TAIL
Deletes the tail of the list
@end itemize
@end itemize

Return values:
@itemize @bullet
@item 0
Operation succeeded.
@item EGAINVAL
Invalid argument provided. This value is returned if:
@itemize @bullet
@item The @samp{whence} parameter has invalid value
@item The @samp{data} parameter is null and no deallocator was provided.
@end itemize
This value may be returned, also, if the descriptor provided was
invalid.

@item EOF
The list is already empty
@end itemize

@emph{Hints}:
@itemize
@item
If the list was never iterated, the current position points to
nowhere. No deletion will take place for operations using
whence=POS_CURR, POS_NEXT or POS_PREV.
@item 
If you provide NULL for the data storage, the function will call the
deallocator provided to free the data memory instead of extracting the
data from the list and return it to you.
@item
If you delete the current element (whence=POS_CURR), the current
pointer will be reset to NULL and if you issue again the same
operation, it will fail by returning to the caller EOF, since the
current pointer was reset due to the previous operation.
@end itemize

@c ** Includes the licenses 
@node Licenses, , functions, Top
@include licenses.texi

@bye
