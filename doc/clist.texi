\input texinfo @c -*-texinfo-*-
@c $Id: clist.texi,v 1.1 2004-04-04 23:48:05 ron_lima Exp $
@c %**start of header
@setfilename clist.info
@settitle    Circular Lists
@c %**end of header

@copying
@c ** Copyrght
Copyright @copyright{} 2004 - Ronaldo Faria Lima - All rights reserved

Last update: @value{UPDATED}

Revision: @value{VERSION}
@end copying

@titlepage
@c ** Title page

@title G.A. Library
@subtitle Circular lists interface
@author Ronaldo Faria Lima

@c ** Copyright page
@page
@insertcopying
@end titlepage

@c ** Table of contents
@contents

@c ** The top node
@ifnottex
@node Top
@top Template
@end ifnottex

@c ** Main Menu
@menu
* algorithm :: Algorithm implemented by G.A. Library
* data types:: Data types
* functions :: Description of all available functions
* Licenses  :: Licenses and other information
@end menu

@node algorithm, constants, Top, Top
@chapter Single circular linked lists in G.A. Library
G.A. Library implements the circular lists as single linked lists
where the tail of the list is linked back to the beginning. Since the
circular list is based on single linked lists, it is possible to
iterate through the list solely in one direction.

The circular lists routines are built on the single linked lists
routines. The functions that manages the circular lists are exactly
the same for the single linked lists. For better reading, the common
functions were masked by macros.

Thread safety is not guaranteed, since the lists are not expected to
be thread safe in this current release.

@node notes, data types, algorithm, Top
@chapter Notes about circular lists documentation

The circular lists is heavily based on the singular lists
routines. For the constants and macros, please refer to the singular
lists documentation.

@node data types, functions, notes, Top
@chapter Data types
The following data types are defined for circular list implementation.
@itemize @bullet
@item clist_element_t:
Data structure that describes a list element. There is no need to use
this data type since this is used internally by the list
descriptor. This is, in fact, a typedef to the list_element_t data
type.
@item clist_t:
Data structure that decribes the list descriptor. This is used to hold
all needed data to implement the list. There is no need to access
directly any element of this structure since they are manipulated by
the functions of the library. This is, in fact, a typedef to the
list_t datatype.
@end itemize

Please refer to the list documentation for a complete set of
information on other data types.

@node functions, Licenses, data types, Top
@chapter Functions
All the functions in the clist.h header file are implemented as macros
to the list.h functions. The only exception regards the clist_insert
function that have a different way to link new elements into the
list. All the other functions are macros that expands to calls to the
list.h functions. The following table shows each macro and the real
function that it masks. Refer to the proper list.h documentation for
reference.

@table @samp
@item clist_alloc
list_alloc
@item clist_free
list_free
@item clist_del
list_del
@item clist_get
list_get
@item clist_move
list_move
@end table

@menu
* clist_insert:: Inserts a new element
@end menu

@node clist_insert, , functions, functions
@section int clist_insert (clist_t * list, const void *data)
Purpose: Inserts a new element in the list

Parameters:
@itemize @bullet
@item list:
List descriptor
@item data:
Data pointer to be inserted in the list
@end itemize

Return values:
@itemize @bullet
@item 0: success
@item -1: failure
@end itemize

Error values in errno:
@itemize @bullet
@item ENOMEM:
It was not possible to allocate memory for the element descriptor for
the list.
@end itemize

@emph{Hints}:
@itemize
@item
This function always inserts the element at the end of the list.
@item 
This function updates the value of the current pointer. So, if the
list was initialized and then several elements were inserted, the
current pointer will always point to the last inserted element.
@end itemize

@c ** Includes the licenses 
@node Licenses, , functions, Top
@include licenses.texi

@bye
