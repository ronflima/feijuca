\input texinfo @c -*-texinfo-*-
@c $Id: list.texi,v 1.7 2005-02-20 18:05:16 ron_lima Exp $
@c %**start of header
@setfilename list.info
@settitle    Lists
@c %**end of header

@copying
@c ** Copyrght
Copyright @copyright{} 2004 - Ronaldo Faria Lima - All rights reserved
@end copying

@titlepage
@c ** Title page

@title G.A. Library
@subtitle Single linked lists interface
@author Ronaldo Faria Lima

@c ** Copyright page
@page
@insertcopying
@end titlepage

@c ** Table of contents
@contents

@c ** The top node
@ifnottex
@node Top
@top List
@end ifnottex

@c ** Main Menu
@menu
* algorithm :: Algorithm implemented by G.A. Library
* data types:: Data types
* functions :: Description of all available functions
* Licenses  :: Licenses and other information
@end menu

@node algorithm, data types, Top, Top
@chapter Single linked lists in G.A. Library
G.A. Library implements single linked lists through the header file
<list.h>. The list descriptor contains always the first and the last
elements for fast access in the list. Navigation in the list is
possible only in one way: from the beginning through the end. This is
an effect on how single linked lists are built.

Single linked lists are useful when you have a collection of data that
must be traversed from the beginning through the end and you don't
know the amount of data that will be loaded in memory.

Until this release, no thread safety was analyzed or even implemented
in the algorithms. So, thread safety is not guaranteed.

@node data types, functions, algorithm, Top
@chapter Data types
The following data types are defined for list implementation.
@itemize @bullet
@item list_element_t:
Data structure that describes a list element. There is no need to use
this data type since this is used internally by the list descriptor.
@item list_t:
Data structure that decribes the list descriptor. This is used to hold
all needed data to implement the list. There is no need to access
directly any element of this structure since they are manipulated by
the functions of the library.
@end itemize

@node functions, Licenses, data types, Top
@chapter Functions
Here all possible operations regarding lists are described.

@menu
* list_init    :: List initialization function
* list_destroy :: List destruction function
* list_get     :: Element getter
* list_insert  :: Inserts a new element
* list_move    :: Iterates the list
* list_del     :: Deletes a single element of the list
* list_reverse :: Reverses the list
@end menu

@c ***** list_init
@node list_init, list_destroy, functions, functions
@section int list_init (list_t *list, deallocator_t dealloc)
Purpose: Allocates a new list descriptor and initializes it

Parameters:
@itemize @bullet
@item list:
List descriptor to initialize
@item dealloc:
Deallocator pointer function for the user-defined deallocation
function (required)
@end itemize

Return values:
@itemize @bullet
@item 0
Operation was successful.
@item EGANOMEM
No memory could be allocated for the list descriptor.
@item EGAINVAL
The deallocator provided is not valid. The validation here is done
checking if the deallocator is a null pointer or not.
@end itemize

@emph{Hints}:
@itemize
@item
The deallocator function is a user-defined function that will handle
the deallocation of the data stored in the list. Since this set of
functions were designed to work over any kind of user-defined data, so
the deallocation will be responsibility of the user, since the library
has no way to know how to handle deallocations of generic data. This
function must have the following prototype:
@example
void deallocator (void *data);
@end example
You will note that this prototype is exactly the same definition of
the @samp{deallocator_t} data type.
@end itemize

@c ***** list_destroy
@node list_destroy, list_get, list_init, functions
@section int list_destroy (list_t * list)
Purpose: Destroys each element and releases the entire list from
memory

Parameters:
@itemize @bullet
@item list:
The list descriptor to destroy
@end itemize

Return values:
@itemize @bullet
@item Always returns 0
@end itemize

@c ***** list_get
@node list_get, list_insert, list_destroy, functions
@section int list_get (list_t * list, void **data, int whence)
Purpose: Gets an element data from the list and make it possible to
navigate the list after getting the data. 

Parameters:
@itemize @bullet
@item list:
The list descriptor
@item data:
Data to be get. Remain untouched if the function could not retrieve
data for some reason.
@item whence:
This parameter indicates how to navigate the list after the data is
retrieved.
@itemize @bullet
@item POS_CURR: 
Gets the current element data and do not update the current pointer.
@item POS_NONE:
Same effect of @emph{POS_CURR}.
@item POS_NEXT:
Gets the current element data and makes the current pointer point to the
next element (moves the list)
@end itemize
@end itemize

Return values:
@itemize @bullet
@item 0
The operation was successful
@item EGAINVAL
The value provided to @emph{whence} parameter is invalid.
@item EOF
End of the list reached.
@end itemize

@emph{Hints}: 
@itemize
@item
To get the first element, use list_move function (see
@xref{list_move}.) and then use the function with whence=POS_CURR or
POS_NONE.
@item
This function was designed, basically, to retrieve data from the list
by iterating it from the current position to the next. The data is
retrieved and not deleted from the list.
@item 
This function will return, always, the data from the current position
of the list. The @samp{whence} parameter says how the list will be
navigated after the current element is returned.
@end itemize

@c ***** list_insert
@node list_insert, list_move, list_get, functions
@section int list_insert (list_t * list, const void *data, position_t whence)
Purpose: Inserts a new element in the list

Parameters:
@itemize @bullet
@item list:
List descriptor
@item data:
Data pointer to be inserted in the list
@item whence:
Where to insert in the list. There are 3 possibilities
@itemize @bullet
@item POS_HEAD:
Inserts data into the head of the list
@item POS_CURR:
Inserts data after the current element of the list
@item POS_TAIL:
Inserts data at the tail of the list
@end itemize
@end itemize

Return values:
@itemize @bullet
@item 0
Operation was successful
@item EGAINVAL
An invalid value was provided to the whence parameter
@item EGANOMEM
No memory available to complete the operation.
@item EGABADC
The operation was called with whence=POS_CURR but the current pointer
is not valid.
@end itemize

@emph{Hints}:
@itemize
@item
If you need to insert data after the current pointer, call the
list_move (@xref{list_move}.) to move the current pointer to the right
position. If the list was not yet navigated, call list_move with
whence=POS_HEAD and then navigate it to the point where you want to
insert data after.
@item 
This function does not update the current pointer. To do so, use the
list_move (@xref{list_move}.) function to update the current pointer after
inserting into the list.
@end itemize

@c ***** list_move
@node list_move, list_del, list_insert, functions
@section int list_move (list_t * list, int whence)
Purpose: Moves the current pointer to a specific location within the
list

Parameters:
@itemize @bullet
@item list:
The list descriptor
@item whence:
How to move the pointer:
@itemize @bullet
@item POS_HEAD:
Moves the pointer to the beginning of the list
@item POS_TAIL:
Moves the pointer to the end of the list
@item POS_NEXT:
Moves the pointer to the next item of the list
@item POS_NONE:
Does absolutely nothing.
@end itemize
@end itemize

Return values:
@itemize @bullet
@item 0
Operation succeeded
@item EGAINVAL
Invalid value provided to @emph{whence} parameter
@item EOF
End of list reached
@end itemize

Error values in errno:
@itemize @bullet
@item EINVAL:
The whence parameter has values not recognized by the function.
@end itemize

@emph{Hints}:
@itemize
@item
If the list was never moved, the current pointer points to
nowhere. Any try to move the pointer to anywhere that is not the
beginning or the end of the list will return EOF.
@item 
Moving the current pointer to the tail of the list to navigate it
backwards is not possible. This is a limitation of the single linked
lists algorithm.
@end itemize

@c ***** list_del
@node list_del, list_reverse, list_move, functions
@section int list_del (list_t * list, void **data)
Purpose: Deletes a single element from the list

Parameters:
@itemize @bullet
@item list:
The list descriptor
@item data:
Data storage arena to store the data extracted from the list.
@end itemize

Return values:
@itemize @bullet
@item 0
Operation succeded
@item EGAINVAL
The @emph{data} parameter is empty and there is no deallocator
available to clean the data from the list.
@item EOF
The list is empty. No more items to delete from it.
@end itemize

@emph{Hints}:
@itemize
@item
If the list was never iterated, the current position points to
nowhere. So, the deletion will happen in the head of the list.
@item 
If you provide NULL for the data storage, the function will call the
deallocator provided to free the data memory.
@end itemize

@c ***** list_reverse
@node list_reverse, ,list_del, functions
@section int list_reverse (list_t * list)
Purpose: Reverses the order of the items in the list

Parameters:
@itemize @bullet
@item list:
The list descriptor
@end itemize

Return values:
@itemize @bullet
@item 0
Operation succeded
@item EOF
The list is empty or there is not enough information to reverse the
list.
@end itemize

@c ** Includes the licenses 
@node Licenses, , functions, Top
@include licenses.texi

@bye
