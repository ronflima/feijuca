\input texinfo @c -*-texinfo-*-

@c %**start of header
@setfilename fjc_deque.info
@settitle    Deque routines
@c %**end of header

@copying
@c ** Copyrght
Copyright @copyright{} 2004 - Ronaldo Faria Lima - All rights reserved
@end copying

@titlepage
@c ** Title page

@title Feijuca Library
@subtitle Deque interfaces
@author Daniel Costa Soares

@c ** Copyright page
@page
@insertcopying
@end titlepage

@c ** Table of contents
@contents

@c ** The top node
@ifnottex
@node Top, algorithm, (dir), (dir)
@top Double-ended Queues
@end ifnottex

@c ** Main Menu
@menu
* algorithm :: Algorithm implemented by Feijuca Library
* data types:: Data types
* functions :: Description of all available functions
* Licenses  :: Licenses and other information
@end menu

@c ***** algorithm
@node algorithm, data types, Top, Top
@chapter Deque implementation in Feijuca Library

The deque algorithm is a data structure in which items may be added 
to or deleted from the head or the tail. Library uses the double 
linked lists algorithm as the deque implementation basis.

To add deque algorithms to your program, simply include the deque.h
header file. All needed declarations and functions are there.

@c ***** data types
@node data types, functions, algorithm, Top
@chapter Data types

In order to implement the deques, the following data types are
defined:

@itemize @bullet
@item fjc_deque_t
Deque descriptor. Describes the entire deque.
@end itemize

@c ***** functions
@node functions, Licenses , data types, Top
@chapter Functions

@c ***** functions menu
@menu
* fjc_deque_init    :: Initializes a deque descriptor
* fjc_deque_destroy :: Destroys the deque descriptor
* fjc_deque_pop     :: Gets (head or tail) an item from the deque  
* fjc_deque_push    :: Adds (head or tail) an item into the deque
@end menu

@c ***** fjc_deque_init
@node fjc_deque_init, fjc_deque_destroy, functions, functions
@section int fjc_deque_init (fjc_deque_t *deque, fjc_deallocator_t *dealloc)

Purpose: Initializes a deque descriptor and makes it available for
usage.

Parameters:
@itemize @bullet
@item deque
Deque descriptor to initialize
@item dealloc
Deallocator to use to clean up memory when each element of the deque
is popped.
@end itemize

@emph{Hints}:
@itemize @bullet
@item
The deallocator is used effectively only by the fjc_deque_destroy and 
fjc_deque_pop routine. Even though, you have to provide it in order 
to avoid memory leaks when deleting the deque or its items from memory.
@end itemize

@inforef{fjc_dlist_init, Double-linked List initialization routine,
fjc_dlist.info}, for more information.

@c ***** fjc_deque_destroy
@node fjc_deque_destroy, fjc_deque_pop, fjc_deque_init, functions
@section int fjc_deque_destroy (fjc_deque_t *deque)

Purpose: Deletes the entire deque from the memory

Parameters:
@itemize @bullet
@item deque
Deque descriptor to destroy
@end itemize

@inforef{fjc_dlist_destroy, Double-linked List destruction routine,
fjc_dlist.info}, for more information.

@c ***** fjc_deque_pop
@node fjc_deque_pop, fjc_deque_push, fjc_deque_destroy, functions
@section int fjc_deque_pop (fjc_deque_t *deque, void **data, fjc_position_t whence)

Purpose: Gets (pops) an element from the deque giving a valid position (HEAD or TAIL)

Parameters:
@itemize @bullet
@item deque
Deque descriptor
@item data
Data popped from the deque
@item whence
Side of the deque where data will be poped (HEAD or TAIL)
@end itemize

@emph{Hints}:
@itemize @bullet
@item
Even though fjc_position_t enumeration has other valid values, the deque structure
only accept the values POS_FJC_HEAD and POS_FJC_TAIL. All other values will return an
error E_FJC_INVAL.
@end itemize

@inforef{fjc_dlist_del, Double-linked List deletion routine,
fjc_dlist.info}, for more information.

@c ***** fjc_deque_push
@node fjc_deque_push,  , fjc_deque_pop, functions
@section int fjc_deque_push (fjc_deque_t *deque, const void *data, fjc_position_t whence)

Purpose: Adds (pushes) a new element to the deque giving a valid position (HEAD or TAIL)

Parameters:
@itemize @bullet
@item deque
deque descriptor
@item data
Data to push into the deque
@item whence
Side of the deque where data will be pushed (HEAD or TAIL)
@end itemize

@emph{Hints}:
@itemize @bullet
@item
Even though fjc_position_t enumeration has other valid values, the
deque structure only accept the values POS_FJC_HEAD and
POS_FJC_TAIL. All other values will return an error E_FJC_INVAL.
@end itemize

@inforef{fjc_dlist_insert, Double-linked List insertion routine,
fjc_dlist.info}, for more information.

@c ** Includes the licenses 
@node Licenses, , functions, Top
@include licenses.texi

@bye
